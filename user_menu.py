#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é: –ú–æ–∏ –∑–∞–∫–∞–∑—ã, –û–±—Ä–∞—â–µ–Ω–∏—è, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –û—Ç–∑—ã–≤—ã
"""

import os
import sqlite3
from datetime import datetime
from telebot import types
import base64


DATABASE = os.getenv('DATABASE', 'bot.db')


def decrypt_data(encrypted_data: str) -> str:
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    return base64.b64decode(encrypted_data.encode('utf-8')).decode('utf-8')


def register_user_menu_handlers(bot, user_states, user_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é"""
    
    # ========== –ú–û–ò –ó–ê–ö–ê–ó–´ ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "my_orders")
    def my_orders_callback(call):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'"""
        bot.answer_callback_query(call.id, "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
        show_my_orders(call.message, call.from_user.id, page=0)
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("my_orders_page_"))
    def my_orders_page_callback(call):
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤"""
        page = int(call.data.split("_")[-1])
        bot.answer_callback_query(call.id)
        show_my_orders(call.message, call.from_user.id, page)
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("view_my_order_"))
    def view_my_order_callback(call):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        order_id = int(call.data.split("_")[-1])
        bot.answer_callback_query(call.id)
        show_order_details(call.message, call.from_user.id, order_id)
    
    
    def show_my_orders(message, user_id, page=0):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute("""
            SELECT COUNT(*) FROM orders WHERE user_id = ?
        """, (user_id,))
        total = cursor.fetchone()[0]
        
        if total == 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
            bot.edit_message_text(
                "üì¶ *–ú–æ–∏ –∑–∞–∫–∞–∑—ã*\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!",
                message.chat.id,
                message.message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
            conn.close()
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 5 –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        per_page = 5
        offset = page * per_page
        
        cursor.execute("""
            SELECT o.id, p.name, i.weight_grams, i.price_rub, o.status, o.created_at
            FROM orders o
            JOIN inventory i ON o.inventory_id = i.id
            JOIN products p ON i.product_id = p.id
            WHERE o.user_id = ?
            ORDER BY o.created_at DESC
            LIMIT ? OFFSET ?
        """, (user_id, per_page, offset))
        orders = cursor.fetchall()
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        status_emoji = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω—ë–Ω'
        }
        
        text = f"üì¶ *–ú–æ–∏ –∑–∞–∫–∞–∑—ã* (–≤—Å–µ–≥–æ: {total})\n\n"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        for order_id, name, weight, price, status, created_at in orders:
            status_text = status_emoji.get(status, status)
            date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
            
            button_text = f"‚Ññ{order_id} | {name} {weight}g | {price}‚ÇΩ | {status_text}"
            markup.add(types.InlineKeyboardButton(
                button_text,
                callback_data=f"view_my_order_{order_id}"
            ))
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_orders_page_{page-1}"))
        if (page + 1) * per_page < total:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"my_orders_page_{page+1}"))
        
        if nav_buttons:
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        
        bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    def show_order_details(message, user_id, order_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT o.id, p.name, c.name as city, d.name as district, i.weight_grams, i.price_rub,
                   o.status, o.created_at, o.confirmed_at, o.rejection_reason,
                   i.data_encrypted
            FROM orders o
            JOIN inventory i ON o.inventory_id = i.id
            JOIN products p ON i.product_id = p.id
            JOIN cities c ON i.city_id = c.id
            JOIN districts d ON i.district_id = d.id
            WHERE o.id = ? AND o.user_id = ?
        """, (order_id, user_id))
        order = cursor.fetchone()
        conn.close()
        
        if not order:
            bot.answer_callback_query(message.chat.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        order_id, name, city, district, weight, price, status, created_at, confirmed_at, rejection_reason, encrypted_data = order
        
        status_emoji = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω—ë–Ω'
        }
        
        text = f"üì¶ *–ó–∞–∫–∞–∑ ‚Ññ{order_id}*\n\n"
        text += f"üõç –¢–æ–≤–∞—Ä: {name}\n"
        text += f"üìç –ì–æ—Ä–æ–¥: {city}\n"
        text += f"üó∫ –†–∞–π–æ–Ω: {district}\n"
        text += f"‚öñÔ∏è –í–µ—Å: {weight}g\n"
        text += f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji.get(status, status)}\n"
        text += f"üìÖ –î–∞—Ç–∞: {datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')}\n"
        
        if confirmed_at:
            text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {datetime.fromisoformat(confirmed_at).strftime('%d.%m.%Y %H:%M')}\n"
        
        if rejection_reason:
            text += f"\n‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:\n{rejection_reason}\n"
        
        if status == 'confirmed' and encrypted_data:
            text += f"\nüîí *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:*\n"
            text += f"```\n{decrypt_data(encrypted_data)}\n```\n"
            text += "\n‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="my_orders"))
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        
        bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    # ========== –ú–û–ò –û–ë–†–ê–©–ï–ù–ò–Ø (–¢–ò–ö–ï–¢–´) ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "my_tickets")
    def my_tickets_callback(call):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        bot.answer_callback_query(call.id, "üí¨ –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
        show_my_tickets(call.message, call.from_user.id, page=0)
    
    
    @bot.callback_query_handler(func=lambda call: call.data == "create_ticket")
    def create_ticket_callback(call):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        bot.answer_callback_query(call.id)
        user_states[call.from_user.id] = "awaiting_ticket_text"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="my_tickets"))
        
        bot.edit_message_text(
            "üí¨ *–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è*\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "awaiting_ticket_text")
    def handle_ticket_text(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        user_id = message.from_user.id
        text = message.text
        
        if len(text) < 10:
            bot.send_message(
                message.chat.id,
                "‚ùå –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        if len(text) > 1000:
            bot.send_message(
                message.chat.id,
                "‚ùå –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∏–∫–µ—Ç
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO tickets (user_id, subject, message, status, created_at)
            VALUES (?, ?, ?, 'open', datetime('now'))
        """, (user_id, "–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", text))
        
        ticket_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(user_id, None)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_id = int(os.getenv('ADMIN_ID', '0'))
        if admin_id:
            try:
                admin_markup = types.InlineKeyboardMarkup()
                admin_markup.add(types.InlineKeyboardButton(
                    "üìù –û—Ç–≤–µ—Ç–∏—Ç—å",
                    callback_data=f"reply_ticket_{ticket_id}"
                ))
                
                bot.send_message(
                    admin_id,
                    f"üí¨ *–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id}*\n\n"
                    f"üë§ –û—Ç: {user_id}\n"
                    f"üìù –¢–µ–∫—Å—Ç:\n{text}",
                    parse_mode="Markdown",
                    reply_markup=admin_markup
                )
            except:
                pass
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets"))
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id} —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=markup
        )
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("my_tickets_page_"))
    def my_tickets_page_callback(call):
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        page = int(call.data.split("_")[-1])
        bot.answer_callback_query(call.id)
        show_my_tickets(call.message, call.from_user.id, page)
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("view_my_ticket_"))
    def view_my_ticket_callback(call):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        ticket_id = int(call.data.split("_")[-1])
        bot.answer_callback_query(call.id)
        show_ticket_details(call.message, call.from_user.id, ticket_id)
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("reply_ticket_") and not call.data.startswith("reply_ticket_send_"))
    def reply_ticket_user_callback(call):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç"""
        ticket_id = int(call.data.split("_")[-1])
        bot.answer_callback_query(call.id)
        
        user_states[call.from_user.id] = f"replying_ticket_{ticket_id}"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_my_ticket_{ticket_id}"))
        
        bot.edit_message_text(
            f"üí¨ *–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id}*\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, "").startswith("replying_ticket_"))
    def handle_ticket_reply(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        state = user_states.get(message.from_user.id, "")
        ticket_id = int(state.split("_")[-1])
        reply_text = message.text
        
        if len(reply_text) < 5:
            bot.send_message(
                message.chat.id,
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ message
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("SELECT message FROM tickets WHERE id = ?", (ticket_id,))
        result = cursor.fetchone()
        if not result:
            conn.close()
            bot.send_message(message.chat.id, "‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            user_states.pop(message.from_user.id, None)
            return
        
        old_message = result[0]
        updated_message = f"{old_message}\n\n--- –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---\n{reply_text}"
        
        cursor.execute("""
            UPDATE tickets 
            SET message = ?, status = 'answered', updated_at = datetime('now')
            WHERE id = ?
        """, (updated_message, ticket_id))
        
        conn.commit()
        conn.close()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(message.from_user.id, None)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_id = int(os.getenv('ADMIN_ID', '0'))
        if admin_id:
            try:
                bot.send_message(
                    admin_id,
                    f"üí¨ *–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id}*\n\n"
                    f"üë§ –û—Ç: {message.from_user.id}\n"
                    f"üìù –¢–µ–∫—Å—Ç:\n{reply_text}",
                    parse_mode="Markdown"
                )
            except:
                pass
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö –æ–±—Ä–∞—â–µ–Ω–∏—é", callback_data=f"view_my_ticket_{ticket_id}"))
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=markup
        )
    
    
    def show_my_tickets(message, user_id, page=0):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT COUNT(*) FROM tickets WHERE user_id = ?
        """, (user_id,))
        total = cursor.fetchone()[0]
        
        text = f"üí¨ *–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è* (–≤—Å–µ–≥–æ: {total})\n\n"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="create_ticket"))
        
        if total == 0:
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
            bot.edit_message_text(
                text + "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.",
                message.chat.id,
                message.message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
            conn.close()
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        per_page = 5
        offset = page * per_page
        
        cursor.execute("""
            SELECT id, subject, status, created_at
            FROM tickets
            WHERE user_id = ?
            ORDER BY created_at DESC
            LIMIT ? OFFSET ?
        """, (user_id, per_page, offset))
        tickets = cursor.fetchall()
        conn.close()
        
        status_emoji = {
            'open': 'üü¢ –û—Ç–∫—Ä—ã—Ç–æ',
            'answered': 'üîµ –ï—Å—Ç—å –æ—Ç–≤–µ—Ç',
            'closed': '‚ö´Ô∏è –ó–∞–∫—Ä—ã—Ç–æ'
        }
        
        for ticket_id, subject, status, created_at in tickets:
            date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
            button_text = f"‚Ññ{ticket_id} | {status_emoji.get(status, status)} | {date}"
            markup.add(types.InlineKeyboardButton(
                button_text,
                callback_data=f"view_my_ticket_{ticket_id}"
            ))
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_tickets_page_{page-1}"))
        if (page + 1) * per_page < total:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"my_tickets_page_{page+1}"))
        
        if nav_buttons:
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        
        bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    def show_ticket_details(message, user_id, ticket_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, subject, message, status, created_at, admin_response, updated_at
            FROM tickets
            WHERE id = ? AND user_id = ?
        """, (ticket_id, user_id))
        ticket = cursor.fetchone()
        conn.close()
        
        if not ticket:
            bot.answer_callback_query(message.chat.id, "‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        ticket_id, subject, msg, status, created_at, admin_response, updated_at = ticket
        
        status_emoji = {
            'open': 'üü¢ –û—Ç–∫—Ä—ã—Ç–æ',
            'answered': 'üîµ –ï—Å—Ç—å –æ—Ç–≤–µ—Ç',
            'closed': '‚ö´Ô∏è –ó–∞–∫—Ä—ã—Ç–æ'
        }
        
        text = f"üí¨ *–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id}*\n\n"
        text += f"üìã –¢–µ–º–∞: *{subject}*\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji.get(status, status)}\n"
        text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')}\n\n"
        text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É
        text += f"üë§ *–í—ã:*\n"
        for line in msg.split('\n'):
            text += f"‚îÉ {line}\n"
        text += f"üïê {datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')}\n"
        
        if admin_response:
            text += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            text += f"üë®‚Äçüíº *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:*\n"
            for line in admin_response.split('\n'):
                text += f"‚îÉ {line}\n"
            if updated_at:
                text += f"üïê {datetime.fromisoformat(updated_at).strftime('%d.%m.%Y %H:%M')}\n"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        if status != 'closed':
            markup.add(types.InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_ticket_{ticket_id}"))
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –æ–±—Ä–∞—â–µ–Ω–∏–π", callback_data="my_tickets"))
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        
        bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    # ========== –ò–ù–§–û–†–ú–ê–¶–ò–Ø ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "info")
    def info_callback(call):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
        bot.answer_callback_query(call.id, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        text = """‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*

üõç *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!*

üìã *–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
2. –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–µ—Å
4. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º
5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
6. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
7. –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É –≤—Ä—É—á–Ω—É—é

üîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚Ä¢ –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º

üí¨ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"
‚Ä¢ –û—Ç–≤–µ—Ç –æ–±—ã—á–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

üì¶ *–î–æ—Å—Ç–∞–≤–∫–∞:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–∫–ª–∞–¥–æ–∫
‚Ä¢ –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞

‚ö°Ô∏è *–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:*
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ö–∞—Ç–∞–ª–æ–≥"
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! üéâ"""
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    # ========== –û–¢–ó–´–í–´ ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "reviews")
    def reviews_callback(call):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤"""
        bot.answer_callback_query(call.id, "‚≠êÔ∏è –û—Ç–∑—ã–≤—ã")
        show_reviews(call.message, call.from_user.id, page=0)
    
    
    @bot.callback_query_handler(func=lambda call: call.data == "leave_review")
    def leave_review_callback(call):
        """–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"""
        bot.answer_callback_query(call.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT COUNT(*) FROM orders
            WHERE user_id = ? AND status = 'confirmed'
        """, (call.from_user.id,))
        confirmed_orders = cursor.fetchone()[0]
        conn.close()
        
        if confirmed_orders == 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö –æ—Ç–∑—ã–≤–∞–º", callback_data="reviews"))
            
            bot.edit_message_text(
                "‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n"
                "–°–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º "
                "–≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            return
        
        user_states[call.from_user.id] = "awaiting_review_rating"
        
        markup = types.InlineKeyboardMarkup(row_width=5)
        for i in range(1, 6):
            markup.add(types.InlineKeyboardButton(
                f"{'‚≠êÔ∏è' * i}",
                callback_data=f"review_rating_{i}"
            ))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="reviews"))
        
        bot.edit_message_text(
            "‚≠êÔ∏è *–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤*\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤—ë–∑–¥:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("review_rating_"))
    def review_rating_callback(call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        rating = int(call.data.split("_")[-1])
        user_data[call.from_user.id] = {'review_rating': rating}
        user_states[call.from_user.id] = "awaiting_review_text"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="reviews"))
        
        bot.edit_message_text(
            f"‚≠êÔ∏è *–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤*\n\n"
            f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {'‚≠êÔ∏è' * rating}\n\n"
            f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (10-500 —Å–∏–º–≤–æ–ª–æ–≤):",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
    
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "awaiting_review_text")
    def handle_review_text(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"""
        user_id = message.from_user.id
        text = message.text
        
        if len(text) < 10:
            bot.send_message(
                message.chat.id,
                "‚ùå –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        if len(text) > 500:
            bot.send_message(
                message.chat.id,
                "‚ùå –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        rating = user_data.get(user_id, {}).get('review_rating', 5)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤ –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è)
        cursor.execute("""
            SELECT COUNT(*) FROM reviews
            WHERE user_id = ? AND created_at > datetime('now', '-1 day')
        """, (user_id,))
        recent = cursor.fetchone()[0]
        
        if recent > 0:
            conn.close()
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!"
            )
            user_states.pop(user_id, None)
            user_data.pop(user_id, None)
            return
        
        cursor.execute("""
            INSERT INTO reviews (user_id, rating, comment, is_approved, created_at)
            VALUES (?, ?, ?, 0, datetime('now'))
        """, (user_id, rating, text))
        
        conn.commit()
        conn.close()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìã –û—Ç–∑—ã–≤—ã", callback_data="reviews"))
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.",
            reply_markup=markup
        )
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("reviews_page_"))
    def reviews_page_callback(call):
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
        page = int(call.data.split("_")[-1])
        bot.answer_callback_query(call.id)
        show_reviews(call.message, call.from_user.id, page)
    
    
    def show_reviews(message, user_id, page=0):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –°—á–∏—Ç–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
        cursor.execute("""
            SELECT COUNT(*) FROM reviews WHERE is_approved = 1
        """)
        total = cursor.fetchone()[0]
        
        text = f"‚≠êÔ∏è *–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤* (–≤—Å–µ–≥–æ: {total})\n\n"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review"))
        
        if total == 0:
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
            bot.edit_message_text(
                text + "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!",
                message.chat.id,
                message.message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
            conn.close()
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 3 –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        per_page = 3
        offset = page * per_page
        
        cursor.execute("""
            SELECT rating, comment, created_at
            FROM reviews
            WHERE is_approved = 1
            ORDER BY created_at DESC
            LIMIT ? OFFSET ?
        """, (per_page, offset))
        reviews = cursor.fetchall()
        conn.close()
        
        for rating, comment, created_at in reviews:
            date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y")
            text += f"{'‚≠êÔ∏è' * rating}\n"
            text += f"_{comment}_\n"
            text += f"üìÖ {date}\n\n"
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"reviews_page_{page-1}"))
        if (page + 1) * per_page < total:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"reviews_page_{page+1}"))
        
        if nav_buttons:
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
        
        bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
